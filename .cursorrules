# Development Guidelines

## Next.js React TypeScript Guidelines

### Core Principles
- Write concise TypeScript code with accurate examples
- Use functional and declarative patterns; avoid classes
- Prefer iteration and modularization over duplication
- Use descriptive variable names with auxiliary verbs (isLoading, hasError)
- Structure: exported component, subcomponents, helpers, static content, types

### Technical Standards
- TypeScript: Use interfaces over types, avoid enums
- Components: Use functional components with TypeScript interfaces
- Directories: Use lowercase with dashes (components/auth-wizard)
- Exports: Favor named exports for components
- Functions: Use "function" keyword for pure functions

### UI Development
- Components: Shadcn UI, Radix UI
- Styling: Tailwind CSS with mobile-first approach
- State: Use 'nuqs' for URL search parameters
- Client Components:
  - Minimize 'use client' usage
  - Wrap in Suspense with fallback
  - Use for Web API access only
  - Avoid for data fetching/state management

## TLDraw Shape Development

### ShapeUtil Implementation
- Extend ShapeUtil for custom shapes
- Keep utils pure and stateless
- Implement proper type safety
- Cache computed values

### Required Methods
- getGeometry(): Returns Geometry2d
- component(): Renders shape JSX
- indicator(): Renders selection indicator
- getDefaultProps(): Sets default properties

### Event Handlers
- onResize(): Handle shape resizing
- onResizeEnd(): Post-resize cleanup
- onRotate(): Handle rotation
- onTranslate(): Handle movement

### BaseBoxShapeUtil Usage
- Extend for rectangular shapes
- Implement proper bounds calculation
- Handle aspect ratio constraints
- Maintain shape integrity during transforms
- Use geometric utilities for calculations

### Performance Best Practices
- Optimize render methods
- Memoize expensive calculations
- Minimize DOM updates
- Handle large canvas performance
- Cache computed values

# TLDraw ShapeUtil Reference

## Overview
You are an expert in TLDraw's shape utilities and custom shape development.

## Key Concepts
- ShapeUtil is the base class for implementing custom shapes
- Each shape type needs a unique ShapeUtil implementation
- Shape utilities handle rendering, transformations, and interactions

## Core Methods
- render(): Renders the shape using HTML/SVG
- indicator(): Renders shape selection indicators
- getGeometry(): Returns shape's geometric properties
- onResize(): Handles shape resizing logic
- onResizeEnd(): Finalizes shape after resize
- onTranslate(): Handles shape movement
- onRotate(): Manages shape rotation

## Type Definitions
- Use TLShape for base shape interface
- Extend TLBaseShape for custom shapes
- Implement Geometry2d for shape bounds

## Event Handlers
- Handle pointer events (click, drag, etc.)
- Implement transform callbacks
- Use transform snapshots for undo/redo

## Best Practices
- Keep shape utils pure and stateless
- Use geometric utilities for calculations
- Implement proper type safety
- Cache computed values when possible
- Handle all transform scenarios

## Performance
- Optimize render methods
- Use memoization for expensive calculations
- Minimize DOM updates
- Handle large canvas performance

## Transformations
- Support all transform operations:
  - resize
  - rotate
  - translate
  - scale
- Maintain aspect ratio when needed
- Handle snapping and constraints

## Geometry
- Work with bounds and points
- Use proper coordinate systems
- Handle different units (px, %)
- Implement proper hit testing

> Follow TLDraw documentation for Shape Development and Utilities.

# BaseBoxShapeUtil Development

## Overview
BaseBoxShapeUtil extends ShapeUtil for box-like shapes that can be resized, rotated, and translated.

## Implementation
```typescript
abstract class BaseBoxShapeUtil<Shape extends TLBaseBoxShape> extends ShapeUtil<Shape> {
  // Required implementations
  abstract getGeometry(shape: Shape): Geometry2d
  abstract component(shape: Shape): any
  abstract indicator(shape: Shape): any
  abstract getDefaultProps(): Shape['props']
}
```

## Core Methods
- getGeometry(): Must return Geometry2d for the shape's bounds
- component(): Returns JSX for rendering the shape
- indicator(): Returns JSX for shape's selection indicator
- getDefaultProps(): Returns default properties for new shapes

## Event Handlers
- onResize(shape, info: TLResizeInfo): Handle shape resizing
- onResizeEnd(initial, current): Post-resize cleanup
- onRotate(initial, current): Handle rotation changes
- onTranslate(initial, current): Handle movement

## Optional Methods
- onBeforeCreate(shape): Pre-creation modifications
- onBeforeUpdate(prev, next): Pre-update modifications
- getHandles(shape): Custom handle definitions
- onHandleDrag(shape, info): Handle interaction
- canEdit(shape): Enable/disable editing

## Best Practices
- Implement proper bounds calculation in getGeometry()
- Handle aspect ratio constraints when needed
- Maintain shape integrity during transformations
- Cache expensive calculations
- Use proper type safety with generics

> Extend BaseBoxShapeUtil for shapes that follow a rectangular bounding model